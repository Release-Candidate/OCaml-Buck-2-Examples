# buildifier: disable=no-effect
prebuilt_cxx_library(
    name = "ocaml-dev",
    header_dirs = [
        "opam/lib/ocaml",
    ],
    header_only = True,
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "libasmrun.a",
    src = "opam/lib/ocaml/libasmrun.a",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "interop_includes",
    src = "opam/lib/ocaml",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlrun",
    src = "opam/bin/ocamlrun",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamldebug",
    src = "opam/bin/ocamldebug",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
command_alias(
    name = "ocamldebug-exe",
    exe = ":ocamldebug",
    resources = [
        ":ocamlrun",
        ":ocamldebug",
        "opam/lib/ocaml",
    ],
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocaml-exe",
    main = "opam/bin/ocaml",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlopt-exe",
    main = "opam/bin/ocamlopt.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlopt.byte",
    src = "opam/bin/ocamlopt.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlprof-exe",
    main = "opam/bin/ocamlprof",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "dune-exe",
    main = "opam/bin/dune",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlmklib-exe",
    main = "opam/bin/ocamlmklib",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlruni-exe",
    main = "opam/bin/ocamlruni",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamllex.byte",
    src = "opam/bin/ocamllex.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlobjinfo-exe",
    main = "opam/bin/ocamlobjinfo.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlbuild-exe",
    main = "opam/bin/ocamlbuild",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlyacc-exe",
    main = "opam/bin/ocamlyacc",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "safe_camlp4-exe",
    main = "opam/bin/safe_camlp4",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlfind-exe",
    main = "opam/bin/ocamlfind",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlmktop-exe",
    main = "opam/bin/ocamlmktop",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlrun-exe",
    main = "opam/bin/ocamlrun",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlc-exe",
    main = "opam/bin/ocamlc.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlbuild.byte",
    src = "opam/bin/ocamlbuild.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamldep-exe",
    main = "opam/bin/ocamldep.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamldep.byte",
    src = "opam/bin/ocamldep.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamllex-exe",
    main = "opam/bin/ocamllex.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "utftrip-exe",
    main = "opam/bin/utftrip",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlrund-exe",
    main = "opam/bin/ocamlrund",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamldoc-exe",
    main = "opam/bin/ocamldoc.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlc.byte",
    src = "opam/bin/ocamlc.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlobjinfo.byte",
    src = "opam/bin/ocamlobjinfo.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlcmt-exe",
    main = "opam/bin/ocamlcmt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocaml-syntax-shims-exe",
    main = "opam/bin/ocaml-syntax-shims",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlcp-exe",
    main = "opam/bin/ocamlcp",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamloptp-exe",
    main = "opam/bin/ocamloptp",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "alcotest",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "alcotest",
    lib_dir = "",
    include_dir = "opam/lib/alcotest",
    native_lib = "opam/lib/alcotest/alcotest.cmxa",
    bytecode_lib = "opam/lib/alcotest/alcotest.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/alcotest/libalcotest_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/alcotest/libalcotest_stubs.a",
    ],
    bytecode_only = True,
    deps = [
        ":fmt",
        ":alcotest.engine",
        ":astring",
        ":unix",
        ":fmt.tty",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.alcotest-plugin",
    src = "opam/lib/alcotest/alcotest.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.runtime.js",
    src = "opam/lib/alcotest/runtime.js",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "alcotest.engine",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "alcotest.engine",
    lib_dir = "",
    include_dir = "opam/lib/alcotest/engine",
    native_lib = "opam/lib/alcotest/engine/alcotest_engine.cmxa",
    bytecode_lib = "opam/lib/alcotest/engine/alcotest_engine.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":fmt",
        ":uutf",
        ":stdlib-shims",
        ":cmdliner",
        ":fmt.cli",
        ":astring",
        ":re",
        ":alcotest.stdlib_ext",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.engine.alcotest_engine-plugin",
    src = "opam/lib/alcotest/engine/alcotest_engine.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "alcotest.stdlib_ext",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "alcotest.stdlib_ext",
    lib_dir = "",
    include_dir = "opam/lib/alcotest/stdlib_ext",
    native_lib = "opam/lib/alcotest/stdlib_ext/alcotest_stdlib_ext.cmxa",
    bytecode_lib = "opam/lib/alcotest/stdlib_ext/alcotest_stdlib_ext.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":astring",
        ":uutf",
        ":cmdliner",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.stdlib_ext.alcotest_stdlib_ext-plugin",
    src = "opam/lib/alcotest/stdlib_ext/alcotest_stdlib_ext.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "astring",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "astring",
    lib_dir = "",
    include_dir = "opam/lib/astring",
    native_lib = "opam/lib/astring/astring.cmxa",
    bytecode_lib = "opam/lib/astring/astring.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "astring.astring-plugin",
    src = "opam/lib/astring/astring.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "astring.top",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "astring.top",
    lib_dir = "",
    include_dir = "opam/lib/astring",
    native_lib = "opam/lib/astring/astring_top.cmxa",
    bytecode_lib = "opam/lib/astring/astring_top.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":astring",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "astring.top.astring_top-plugin",
    src = "opam/lib/astring/astring_top.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "bytes",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "bytes",
    lib_dir = "",
    include_dir = "opam/lib/bytes",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "cmdliner",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "cmdliner",
    lib_dir = "",
    include_dir = "opam/lib/cmdliner",
    native_lib = "opam/lib/cmdliner/cmdliner.cmxa",
    bytecode_lib = "opam/lib/cmdliner/cmdliner.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "cmdliner.cmdliner-plugin",
    src = "opam/lib/cmdliner/cmdliner.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.bytecomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.bytecomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamlbytecomp.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamlbytecomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.common",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.common",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamlcommon.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamlcommon.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.native-toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.native-toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamltoplevel.cmxa",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":dynlink",
        ":compiler-libs.optcomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.optcomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.optcomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamloptcomp.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamloptcomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamltoplevel.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.bytecomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dune",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dune",
    lib_dir = "",
    include_dir = "opam/lib/dune",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dynlink",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dynlink",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/dynlink",
    native_lib = "opam/lib/ocaml/dynlink/dynlink.cmxa",
    bytecode_lib = "opam/lib/ocaml/dynlink/dynlink.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib.internal",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.dynload",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.dynload",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib_dynload.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib_dynload.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib",
        ":dynlink",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "findlib.dynload.findlib_dynload-plugin",
    src = "opam/lib/findlib/findlib_dynload.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.internal",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.internal",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "findlib.internal.findlib-plugin",
    src = "opam/lib/findlib/findlib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.top",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.top",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib_top.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib_top.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib.internal",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.fmt-plugin",
    src = "opam/lib/fmt/fmt.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt.cli",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt.cli",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt_cli.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt_cli.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":fmt",
        ":cmdliner",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.cli.fmt_cli-plugin",
    src = "opam/lib/fmt/fmt_cli.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt.top",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt.top",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt_top.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt_top.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":fmt",
        ":fmt.tty",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.top.fmt_top-plugin",
    src = "opam/lib/fmt/fmt_top.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt.tty",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt.tty",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt_tty.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt_tty.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":fmt",
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.tty.fmt_tty-plugin",
    src = "opam/lib/fmt/fmt_tty.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-syntax-shims",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-syntax-shims",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-syntax-shims",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocamlbuild",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocamlbuild",
    lib_dir = "",
    include_dir = "opam/lib/ocamlbuild",
    native_lib = "opam/lib/ocamlbuild/ocamlbuildlib.cmxa",
    bytecode_lib = "opam/lib/ocamlbuild/ocamlbuildlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocamldoc",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocamldoc",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/ocamldoc",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "qcheck-alcotest",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "qcheck-alcotest",
    lib_dir = "",
    include_dir = "opam/lib/qcheck-alcotest",
    native_lib = "opam/lib/qcheck-alcotest/qcheck_alcotest.cmxa",
    bytecode_lib = "opam/lib/qcheck-alcotest/qcheck_alcotest.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":bytes",
        ":alcotest",
        ":qcheck-core.runner",
        ":qcheck-core",
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "qcheck-alcotest.qcheck_alcotest-plugin",
    src = "opam/lib/qcheck-alcotest/qcheck_alcotest.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "qcheck-core",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "qcheck-core",
    lib_dir = "",
    include_dir = "opam/lib/qcheck-core",
    native_lib = "opam/lib/qcheck-core/qcheck_core.cmxa",
    bytecode_lib = "opam/lib/qcheck-core/qcheck_core.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":bytes",
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "qcheck-core.qcheck_core-plugin",
    src = "opam/lib/qcheck-core/qcheck_core.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "qcheck-core.runner",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "qcheck-core.runner",
    lib_dir = "",
    include_dir = "opam/lib/qcheck-core/runner",
    native_lib = "opam/lib/qcheck-core/runner/qcheck_runner.cmxa",
    bytecode_lib = "opam/lib/qcheck-core/runner/qcheck_runner.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":qcheck-core",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "qcheck-core.runner.qcheck_runner-plugin",
    src = "opam/lib/qcheck-core/runner/qcheck_runner.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re",
    lib_dir = "",
    include_dir = "opam/lib/re",
    native_lib = "opam/lib/re/re.cmxa",
    bytecode_lib = "opam/lib/re/re.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":seq",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.re-plugin",
    src = "opam/lib/re/re.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.emacs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.emacs",
    lib_dir = "",
    include_dir = "opam/lib/re/emacs",
    native_lib = "opam/lib/re/emacs/re_emacs.cmxa",
    bytecode_lib = "opam/lib/re/emacs/re_emacs.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.emacs.re_emacs-plugin",
    src = "opam/lib/re/emacs/re_emacs.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.glob",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.glob",
    lib_dir = "",
    include_dir = "opam/lib/re/glob",
    native_lib = "opam/lib/re/glob/re_glob.cmxa",
    bytecode_lib = "opam/lib/re/glob/re_glob.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.glob.re_glob-plugin",
    src = "opam/lib/re/glob/re_glob.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.pcre",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.pcre",
    lib_dir = "",
    include_dir = "opam/lib/re/pcre",
    native_lib = "opam/lib/re/pcre/re_pcre.cmxa",
    bytecode_lib = "opam/lib/re/pcre/re_pcre.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.pcre.re_pcre-plugin",
    src = "opam/lib/re/pcre/re_pcre.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.perl",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.perl",
    lib_dir = "",
    include_dir = "opam/lib/re/perl",
    native_lib = "opam/lib/re/perl/re_perl.cmxa",
    bytecode_lib = "opam/lib/re/perl/re_perl.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.perl.re_perl-plugin",
    src = "opam/lib/re/perl/re_perl.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.posix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.posix",
    lib_dir = "",
    include_dir = "opam/lib/re/posix",
    native_lib = "opam/lib/re/posix/re_posix.cmxa",
    bytecode_lib = "opam/lib/re/posix/re_posix.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.posix.re_posix-plugin",
    src = "opam/lib/re/posix/re_posix.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.str",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.str",
    lib_dir = "",
    include_dir = "opam/lib/re/str",
    native_lib = "opam/lib/re/str/re_str.cmxa",
    bytecode_lib = "opam/lib/re/str/re_str.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.str.re_str-plugin",
    src = "opam/lib/re/str/re_str.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "runtime_events",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "runtime_events",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/runtime_events",
    native_lib = "opam/lib/ocaml/runtime_events/runtime_events.cmxa",
    bytecode_lib = "opam/lib/ocaml/runtime_events/runtime_events.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "runtime_events.runtime_events-plugin",
    src = "opam/lib/ocaml/runtime_events/runtime_events.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "seq",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "seq",
    lib_dir = "",
    include_dir = "opam/lib/seq",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdlib",
    lib_dir = "",
    include_dir = "opam/lib/ocaml",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdlib-shims",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdlib-shims",
    lib_dir = "",
    include_dir = "opam/lib/stdlib-shims",
    native_lib = "opam/lib/stdlib-shims/stdlib_shims.cmxa",
    bytecode_lib = "opam/lib/stdlib-shims/stdlib_shims.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "stdlib-shims.stdlib_shims-plugin",
    src = "opam/lib/stdlib-shims/stdlib_shims.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "str",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "str",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/str",
    native_lib = "opam/lib/ocaml/str/str.cmxa",
    bytecode_lib = "opam/lib/ocaml/str/str.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "str.str-plugin",
    src = "opam/lib/ocaml/str/str.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "threads",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "threads",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/threads",
    native_lib = "opam/lib/ocaml/threads/threads.cmxa",
    bytecode_lib = "opam/lib/ocaml/threads/threads.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "threads.posix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "threads.posix",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/threads",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":threads",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "topkg",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "topkg",
    lib_dir = "",
    include_dir = "opam/lib/topkg",
    native_lib = "opam/lib/topkg/topkg.cmxa",
    bytecode_lib = "opam/lib/topkg/topkg.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "topkg.topkg-plugin",
    src = "opam/lib/topkg/topkg.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "unix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "unix",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/unix",
    native_lib = "opam/lib/ocaml/unix/unix.cmxa",
    bytecode_lib = "opam/lib/ocaml/unix/unix.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "unix.unix-plugin",
    src = "opam/lib/ocaml/unix/unix.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "uutf",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "uutf",
    lib_dir = "",
    include_dir = "opam/lib/uutf",
    native_lib = "opam/lib/uutf/uutf.cmxa",
    bytecode_lib = "opam/lib/uutf/uutf.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "uutf.uutf-plugin",
    src = "opam/lib/uutf/uutf.cmxs",
) if not host_info().os.is_windows else None

