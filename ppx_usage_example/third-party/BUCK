# buildifier: disable=no-effect
prebuilt_cxx_library(
    name = "ocaml-dev",
    header_dirs = [
        "opam/lib/ocaml",
    ],
    header_only = True,
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "libasmrun.a",
    src = "opam/lib/ocaml/libasmrun.a",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "interop_includes",
    src = "opam/lib/ocaml",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlrun",
    src = "opam/bin/ocamlrun",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamldebug",
    src = "opam/bin/ocamldebug",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
command_alias(
    name = "ocamldebug-exe",
    exe = ":ocamldebug",
    resources = [
        ":ocamlrun",
        ":ocamldebug",
        "opam/lib/ocaml",
    ],
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocaml-exe",
    main = "opam/bin/ocaml",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlopt-exe",
    main = "opam/bin/ocamlopt.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlopt.byte",
    src = "opam/bin/ocamlopt.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamllsp-exe",
    main = "opam/bin/ocamllsp",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlprof-exe",
    main = "opam/bin/ocamlprof",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "dune-exe",
    main = "opam/bin/dune",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlmklib-exe",
    main = "opam/bin/ocamlmklib",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "cppo-exe",
    main = "opam/bin/cppo",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlruni-exe",
    main = "opam/bin/ocamlruni",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ydump-exe",
    main = "opam/bin/ydump",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamllex.byte",
    src = "opam/bin/ocamllex.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlobjinfo-exe",
    main = "opam/bin/ocamlobjinfo.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlbuild-exe",
    main = "opam/bin/ocamlbuild",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlyacc-exe",
    main = "opam/bin/ocamlyacc",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "safe_camlp4-exe",
    main = "opam/bin/safe_camlp4",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlfind-exe",
    main = "opam/bin/ocamlfind",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlmktop-exe",
    main = "opam/bin/ocamlmktop",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlrun-exe",
    main = "opam/bin/ocamlrun",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlc-exe",
    main = "opam/bin/ocamlc.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlbuild.byte",
    src = "opam/bin/ocamlbuild.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamldep-exe",
    main = "opam/bin/ocamldep.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamldep.byte",
    src = "opam/bin/ocamldep.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamllex-exe",
    main = "opam/bin/ocamllex.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "utftrip-exe",
    main = "opam/bin/utftrip",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlrund-exe",
    main = "opam/bin/ocamlrund",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamldoc-exe",
    main = "opam/bin/ocamldoc.opt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlc.byte",
    src = "opam/bin/ocamlc.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlobjinfo.byte",
    src = "opam/bin/ocamlobjinfo.byte",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlcmt-exe",
    main = "opam/bin/ocamlcmt",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocaml-syntax-shims-exe",
    main = "opam/bin/ocaml-syntax-shims",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamlcp-exe",
    main = "opam/bin/ocamlcp",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
sh_binary(
    name = "ocamloptp-exe",
    main = "opam/bin/ocamloptp",
    visibility = [
        "PUBLIC",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "alcotest",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "alcotest",
    lib_dir = "",
    include_dir = "opam/lib/alcotest",
    native_lib = "opam/lib/alcotest/alcotest.cmxa",
    bytecode_lib = "opam/lib/alcotest/alcotest.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/alcotest/libalcotest_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/alcotest/libalcotest_stubs.a",
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":fmt.tty",
        ":astring",
        ":fmt",
        ":alcotest.engine",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.alcotest-plugin",
    src = "opam/lib/alcotest/alcotest.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.runtime.js",
    src = "opam/lib/alcotest/runtime.js",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "alcotest.engine",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "alcotest.engine",
    lib_dir = "",
    include_dir = "opam/lib/alcotest/engine",
    native_lib = "opam/lib/alcotest/engine/alcotest_engine.cmxa",
    bytecode_lib = "opam/lib/alcotest/engine/alcotest_engine.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":astring",
        ":fmt",
        ":stdlib-shims",
        ":uutf",
        ":fmt.cli",
        ":alcotest.stdlib_ext",
        ":re",
        ":cmdliner",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.engine.alcotest_engine-plugin",
    src = "opam/lib/alcotest/engine/alcotest_engine.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "alcotest.stdlib_ext",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "alcotest.stdlib_ext",
    lib_dir = "",
    include_dir = "opam/lib/alcotest/stdlib_ext",
    native_lib = "opam/lib/alcotest/stdlib_ext/alcotest_stdlib_ext.cmxa",
    bytecode_lib = "opam/lib/alcotest/stdlib_ext/alcotest_stdlib_ext.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":uutf",
        ":astring",
        ":cmdliner",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "alcotest.stdlib_ext.alcotest_stdlib_ext-plugin",
    src = "opam/lib/alcotest/stdlib_ext/alcotest_stdlib_ext.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "astring",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "astring",
    lib_dir = "",
    include_dir = "opam/lib/astring",
    native_lib = "opam/lib/astring/astring.cmxa",
    bytecode_lib = "opam/lib/astring/astring.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "astring.astring-plugin",
    src = "opam/lib/astring/astring.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "astring.top",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "astring.top",
    lib_dir = "",
    include_dir = "opam/lib/astring",
    native_lib = "opam/lib/astring/astring_top.cmxa",
    bytecode_lib = "opam/lib/astring/astring_top.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":astring",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "astring.top.astring_top-plugin",
    src = "opam/lib/astring/astring_top.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "bytes",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "bytes",
    lib_dir = "",
    include_dir = "opam/lib/bytes",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "camlp-streams",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "camlp-streams",
    lib_dir = "",
    include_dir = "opam/lib/camlp-streams",
    native_lib = "opam/lib/camlp-streams/camlp_streams.cmxa",
    bytecode_lib = "opam/lib/camlp-streams/camlp_streams.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "camlp-streams.camlp_streams-plugin",
    src = "opam/lib/camlp-streams/camlp_streams.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "chrome-trace",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "chrome-trace",
    lib_dir = "",
    include_dir = "opam/lib/chrome-trace",
    native_lib = "opam/lib/chrome-trace/chrome_trace.cmxa",
    bytecode_lib = "opam/lib/chrome-trace/chrome_trace.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "chrome-trace.chrome_trace-plugin",
    src = "opam/lib/chrome-trace/chrome_trace.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "cmdliner",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "cmdliner",
    lib_dir = "",
    include_dir = "opam/lib/cmdliner",
    native_lib = "opam/lib/cmdliner/cmdliner.cmxa",
    bytecode_lib = "opam/lib/cmdliner/cmdliner.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "cmdliner.cmdliner-plugin",
    src = "opam/lib/cmdliner/cmdliner.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.bytecomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.bytecomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamlbytecomp.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamlbytecomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.common",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.common",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamlcommon.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamlcommon.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.native-toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.native-toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamltoplevel.cmxa",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":dynlink",
        ":compiler-libs.optcomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.optcomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.optcomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    native_lib = "opam/lib/ocaml/compiler-libs/ocamloptcomp.cmxa",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamloptcomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "compiler-libs.toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "compiler-libs.toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/compiler-libs",
    bytecode_lib = "opam/lib/ocaml/compiler-libs/ocamltoplevel.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.bytecomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "cppo",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "cppo",
    lib_dir = "",
    include_dir = "opam/lib/cppo",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "csexp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "csexp",
    lib_dir = "",
    include_dir = "opam/lib/csexp",
    native_lib = "opam/lib/csexp/csexp.cmxa",
    bytecode_lib = "opam/lib/csexp/csexp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "csexp.csexp-plugin",
    src = "opam/lib/csexp/csexp.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dune",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dune",
    lib_dir = "",
    include_dir = "opam/lib/dune",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dune-build-info",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dune-build-info",
    lib_dir = "",
    include_dir = "opam/lib/dune-build-info",
    native_lib = "opam/lib/dune-build-info/build_info.cmxa",
    bytecode_lib = "opam/lib/dune-build-info/build_info.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "dune-build-info.build_info-plugin",
    src = "opam/lib/dune-build-info/build_info.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dune-rpc",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dune-rpc",
    lib_dir = "",
    include_dir = "opam/lib/dune-rpc",
    native_lib = "opam/lib/dune-rpc/dune_rpc.cmxa",
    bytecode_lib = "opam/lib/dune-rpc/dune_rpc.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ordering",
        ":csexp",
        ":pp",
        ":stdune",
        ":dune-rpc.private",
        ":xdg",
        ":stdune.filesystem_stubs",
        ":dyn",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "dune-rpc.dune_rpc-plugin",
    src = "opam/lib/dune-rpc/dune_rpc.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dune-rpc.private",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dune-rpc.private",
    lib_dir = "",
    include_dir = "opam/lib/dune-rpc/private",
    native_lib = "opam/lib/dune-rpc/private/dune_rpc_private.cmxa",
    bytecode_lib = "opam/lib/dune-rpc/private/dune_rpc_private.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":ordering",
        ":csexp",
        ":stdune",
        ":pp",
        ":xdg",
        ":stdune.filesystem_stubs",
        ":dyn",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "dune-rpc.private.dune_rpc_private-plugin",
    src = "opam/lib/dune-rpc/private/dune_rpc_private.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dyn",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dyn",
    lib_dir = "",
    include_dir = "opam/lib/dyn",
    native_lib = "opam/lib/dyn/dyn.cmxa",
    bytecode_lib = "opam/lib/dyn/dyn.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":pp",
        ":ordering",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "dyn.dyn-plugin",
    src = "opam/lib/dyn/dyn.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "dynlink",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "dynlink",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/dynlink",
    native_lib = "opam/lib/ocaml/dynlink/dynlink.cmxa",
    bytecode_lib = "opam/lib/ocaml/dynlink/dynlink.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fiber",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fiber",
    lib_dir = "",
    include_dir = "opam/lib/fiber",
    native_lib = "opam/lib/fiber/fiber.cmxa",
    bytecode_lib = "opam/lib/fiber/fiber.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ordering",
        ":stdune",
        ":pp",
        ":stdune.filesystem_stubs",
        ":dyn",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fiber.fiber-plugin",
    src = "opam/lib/fiber/fiber.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib.internal",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.dynload",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.dynload",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib_dynload.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib_dynload.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":dynlink",
        ":findlib",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "findlib.dynload.findlib_dynload-plugin",
    src = "opam/lib/findlib/findlib_dynload.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.internal",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.internal",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "findlib.internal.findlib-plugin",
    src = "opam/lib/findlib/findlib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "findlib.top",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "findlib.top",
    lib_dir = "",
    include_dir = "opam/lib/findlib",
    native_lib = "opam/lib/findlib/findlib_top.cmxa",
    bytecode_lib = "opam/lib/findlib/findlib_top.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":findlib.internal",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.fmt-plugin",
    src = "opam/lib/fmt/fmt.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt.cli",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt.cli",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt_cli.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt_cli.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":cmdliner",
        ":fmt",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.cli.fmt_cli-plugin",
    src = "opam/lib/fmt/fmt_cli.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt.top",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt.top",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt_top.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt_top.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":fmt.tty",
        ":fmt",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.top.fmt_top-plugin",
    src = "opam/lib/fmt/fmt_top.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "fmt.tty",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "fmt.tty",
    lib_dir = "",
    include_dir = "opam/lib/fmt",
    native_lib = "opam/lib/fmt/fmt_tty.cmxa",
    bytecode_lib = "opam/lib/fmt/fmt_tty.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":fmt",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "fmt.tty.fmt_tty-plugin",
    src = "opam/lib/fmt/fmt_tty.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "gen",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "gen",
    lib_dir = "",
    include_dir = "opam/lib/gen",
    native_lib = "opam/lib/gen/gen.cmxa",
    bytecode_lib = "opam/lib/gen/gen.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":seq",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "gen.gen-plugin",
    src = "opam/lib/gen/gen.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "menhirLib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "menhirLib",
    lib_dir = "",
    include_dir = "opam/lib/menhirLib",
    native_lib = "opam/lib/menhirLib/menhirLib.cmxa",
    bytecode_lib = "opam/lib/menhirLib/menhirLib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "menhirLib.menhirLib-plugin",
    src = "opam/lib/menhirLib/menhirLib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.analysis",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.analysis",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/analysis",
    native_lib = "opam/lib/merlin-lib/analysis/merlin_analysis.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/analysis/merlin_analysis.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.ocaml_preprocess",
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.config",
        ":merlin-lib.extend",
        ":merlin-lib.ocaml_utils",
        ":merlin-lib.utils",
        ":merlin-lib.query_protocol",
        ":merlin-lib.ocaml_merlin_specific",
        ":merlin-lib.ocaml_typing",
        ":str",
        ":merlin-lib.kernel",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.analysis.merlin_analysis-plugin",
    src = "opam/lib/merlin-lib/analysis/merlin_analysis.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.config",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.config",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/config",
    native_lib = "opam/lib/merlin-lib/config/merlin_config.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/config/merlin_config.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.config.merlin_config-plugin",
    src = "opam/lib/merlin-lib/config/merlin_config.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.dot_protocol",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.dot_protocol",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/dot_protocol",
    native_lib = "opam/lib/merlin-lib/dot_protocol/merlin_dot_protocol.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/dot_protocol/merlin_dot_protocol.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.utils",
        ":csexp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.dot_protocol.merlin_dot_protocol-plugin",
    src = "opam/lib/merlin-lib/dot_protocol/merlin_dot_protocol.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.extend",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.extend",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/extend",
    native_lib = "opam/lib/merlin-lib/extend/merlin_extend.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/extend/merlin_extend.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":merlin-lib.ocaml_typing",
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.ocaml_utils",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.extend.merlin_extend-plugin",
    src = "opam/lib/merlin-lib/extend/merlin_extend.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.kernel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.kernel",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/kernel",
    native_lib = "opam/lib/merlin-lib/kernel/merlin_kernel.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/kernel/merlin_kernel.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":merlin-lib.ocaml_preprocess",
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.os_ipc",
        ":merlin-lib.config",
        ":merlin-lib.extend",
        ":merlin-lib.ocaml_utils",
        ":merlin-lib.utils",
        ":merlin-lib.ocaml_merlin_specific",
        ":merlin-lib.dot_protocol",
        ":merlin-lib.ocaml_typing",
        ":str",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.kernel.merlin_kernel-plugin",
    src = "opam/lib/merlin-lib/kernel/merlin_kernel.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.ocaml_merlin_specific",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.ocaml_merlin_specific",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/ocaml_merlin_specific",
    native_lib = "opam/lib/merlin-lib/ocaml_merlin_specific/merlin_specific.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/ocaml_merlin_specific/merlin_specific.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.ocaml_preprocess",
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.ocaml_utils",
        ":merlin-lib.utils",
        ":merlin-lib.ocaml_typing",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.ocaml_merlin_specific.merlin_specific-plugin",
    src = "opam/lib/merlin-lib/ocaml_merlin_specific/merlin_specific.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.ocaml_parsing",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.ocaml_parsing",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/ocaml_parsing",
    native_lib = "opam/lib/merlin-lib/ocaml_parsing/ocaml_parsing.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/ocaml_parsing/ocaml_parsing.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.ocaml_utils",
        ":merlin-lib.utils",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.ocaml_parsing.ocaml_parsing-plugin",
    src = "opam/lib/merlin-lib/ocaml_parsing/ocaml_parsing.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.ocaml_preprocess",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.ocaml_preprocess",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/ocaml_preprocess",
    native_lib = "opam/lib/merlin-lib/ocaml_preprocess/ocaml_preprocess.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/ocaml_preprocess/ocaml_preprocess.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.ocaml_utils",
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.utils",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.ocaml_preprocess.ocaml_preprocess-plugin",
    src = "opam/lib/merlin-lib/ocaml_preprocess/ocaml_preprocess.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.ocaml_typing",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.ocaml_typing",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/ocaml_typing",
    native_lib = "opam/lib/merlin-lib/ocaml_typing/ocaml_typing.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/ocaml_typing/ocaml_typing.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.ocaml_utils",
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.utils",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.ocaml_typing.ocaml_typing-plugin",
    src = "opam/lib/merlin-lib/ocaml_typing/ocaml_typing.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.ocaml_utils",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.ocaml_utils",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/ocaml_utils",
    native_lib = "opam/lib/merlin-lib/ocaml_utils/ocaml_utils.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/ocaml_utils/ocaml_utils.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.config",
        ":merlin-lib.utils",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.ocaml_utils.ocaml_utils-plugin",
    src = "opam/lib/merlin-lib/ocaml_utils/ocaml_utils.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.os_ipc",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.os_ipc",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/os_ipc",
    native_lib = "opam/lib/merlin-lib/os_ipc/os_ipc.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/os_ipc/os_ipc.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/merlin-lib/os_ipc/libos_ipc_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/merlin-lib/os_ipc/libos_ipc_stubs.a",
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.os_ipc.os_ipc-plugin",
    src = "opam/lib/merlin-lib/os_ipc/os_ipc.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.query_commands",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.query_commands",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/query_commands",
    native_lib = "opam/lib/merlin-lib/query_commands/query_commands.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/query_commands/query_commands.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.analysis",
        ":merlin-lib.config",
        ":merlin-lib.ocaml_utils",
        ":merlin-lib.utils",
        ":merlin-lib.query_protocol",
        ":merlin-lib.ocaml_merlin_specific",
        ":merlin-lib.ocaml_typing",
        ":str",
        ":merlin-lib.kernel",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.query_commands.query_commands-plugin",
    src = "opam/lib/merlin-lib/query_commands/query_commands.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.query_protocol",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.query_protocol",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/query_protocol",
    native_lib = "opam/lib/merlin-lib/query_protocol/query_protocol.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/query_protocol/query_protocol.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":merlin-lib.ocaml_parsing",
        ":merlin-lib.kernel",
        ":merlin-lib.utils",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.query_protocol.query_protocol-plugin",
    src = "opam/lib/merlin-lib/query_protocol/query_protocol.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "merlin-lib.utils",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "merlin-lib.utils",
    lib_dir = "",
    include_dir = "opam/lib/merlin-lib/utils",
    native_lib = "opam/lib/merlin-lib/utils/merlin_utils.cmxa",
    bytecode_lib = "opam/lib/merlin-lib/utils/merlin_utils.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/merlin-lib/utils/libmerlin_utils_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/merlin-lib/utils/libmerlin_utils_stubs.a",
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":str",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "merlin-lib.utils.merlin_utils-plugin",
    src = "opam/lib/merlin-lib/utils/merlin_utils.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.bytecomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.bytecomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/bytecomp",
    native_lib = "opam/lib/ocaml-compiler-libs/bytecomp/ocaml_bytecomp.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/bytecomp/ocaml_bytecomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.bytecomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.bytecomp.ocaml_bytecomp-plugin",
    src = "opam/lib/ocaml-compiler-libs/bytecomp/ocaml_bytecomp.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.common",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.common",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/common",
    native_lib = "opam/lib/ocaml-compiler-libs/common/ocaml_common.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/common/ocaml_common.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.common.ocaml_common-plugin",
    src = "opam/lib/ocaml-compiler-libs/common/ocaml_common.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.optcomp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.optcomp",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/optcomp",
    native_lib = "opam/lib/ocaml-compiler-libs/optcomp/ocaml_optcomp.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/optcomp/ocaml_optcomp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.optcomp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.optcomp.ocaml_optcomp-plugin",
    src = "opam/lib/ocaml-compiler-libs/optcomp/ocaml_optcomp.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.shadow",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.shadow",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/shadow",
    native_lib = "opam/lib/ocaml-compiler-libs/shadow/ocaml_shadow.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/shadow/ocaml_shadow.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.shadow.ocaml_shadow-plugin",
    src = "opam/lib/ocaml-compiler-libs/shadow/ocaml_shadow.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-compiler-libs.toplevel",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-compiler-libs.toplevel",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-compiler-libs/toplevel",
    native_lib = "opam/lib/ocaml-compiler-libs/toplevel/ocaml_toplevel.cmxa",
    bytecode_lib = "opam/lib/ocaml-compiler-libs/toplevel/ocaml_toplevel.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs.toplevel",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocaml-compiler-libs.toplevel.ocaml_toplevel-plugin",
    src = "opam/lib/ocaml-compiler-libs/toplevel/ocaml_toplevel.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-lsp-server",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-lsp-server",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-lsp-server",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocaml-syntax-shims",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocaml-syntax-shims",
    lib_dir = "",
    include_dir = "opam/lib/ocaml-syntax-shims",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocamlbuild",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocamlbuild",
    lib_dir = "",
    include_dir = "opam/lib/ocamlbuild",
    native_lib = "opam/lib/ocamlbuild/ocamlbuildlib.cmxa",
    bytecode_lib = "opam/lib/ocamlbuild/ocamlbuildlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocamlc-loc",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocamlc-loc",
    lib_dir = "",
    include_dir = "opam/lib/ocamlc-loc",
    native_lib = "opam/lib/ocamlc-loc/ocamlc_loc.cmxa",
    bytecode_lib = "opam/lib/ocamlc-loc/ocamlc_loc.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":dyn",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlc-loc.ocamlc_loc-plugin",
    src = "opam/lib/ocamlc-loc/ocamlc_loc.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocamldoc",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocamldoc",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/ocamldoc",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":compiler-libs",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ocamlformat-rpc-lib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ocamlformat-rpc-lib",
    lib_dir = "",
    include_dir = "opam/lib/ocamlformat-rpc-lib",
    native_lib = "opam/lib/ocamlformat-rpc-lib/ocamlformat_rpc_lib.cmxa",
    bytecode_lib = "opam/lib/ocamlformat-rpc-lib/ocamlformat_rpc_lib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":csexp",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ocamlformat-rpc-lib.ocamlformat_rpc_lib-plugin",
    src = "opam/lib/ocamlformat-rpc-lib/ocamlformat_rpc_lib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "odoc-parser",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "odoc-parser",
    lib_dir = "",
    include_dir = "opam/lib/odoc-parser",
    native_lib = "opam/lib/odoc-parser/odoc_parser.cmxa",
    bytecode_lib = "opam/lib/odoc-parser/odoc_parser.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":astring",
        ":result",
        ":camlp-streams",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "odoc-parser.odoc_parser-plugin",
    src = "opam/lib/odoc-parser/odoc_parser.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ordering",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ordering",
    lib_dir = "",
    include_dir = "opam/lib/ordering",
    native_lib = "opam/lib/ordering/ordering.cmxa",
    bytecode_lib = "opam/lib/ordering/ordering.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ordering.ordering-plugin",
    src = "opam/lib/ordering/ordering.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "pp",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "pp",
    lib_dir = "",
    include_dir = "opam/lib/pp",
    native_lib = "opam/lib/pp/pp.cmxa",
    bytecode_lib = "opam/lib/pp/pp.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "pp.pp-plugin",
    src = "opam/lib/pp/pp.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppx_derivers",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppx_derivers",
    lib_dir = "",
    include_dir = "opam/lib/ppx_derivers",
    native_lib = "opam/lib/ppx_derivers/ppx_derivers.cmxa",
    bytecode_lib = "opam/lib/ppx_derivers/ppx_derivers.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppx_derivers.ppx_derivers-plugin",
    src = "opam/lib/ppx_derivers/ppx_derivers.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppx_yojson_conv_lib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppx_yojson_conv_lib",
    lib_dir = "",
    include_dir = "opam/lib/ppx_yojson_conv_lib",
    native_lib = "opam/lib/ppx_yojson_conv_lib/ppx_yojson_conv_lib.cmxa",
    bytecode_lib = "opam/lib/ppx_yojson_conv_lib/ppx_yojson_conv_lib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":yojson",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppx_yojson_conv_lib.ppx_yojson_conv_lib-plugin",
    src = "opam/lib/ppx_yojson_conv_lib/ppx_yojson_conv_lib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib",
    native_lib = "opam/lib/ppxlib/ppxlib.cmxa",
    bytecode_lib = "opam/lib/ppxlib/ppxlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ocaml-compiler-libs.shadow",
        ":ppx_derivers",
        ":ppxlib.traverse_builtins",
        ":ppxlib.astlib",
        ":stdlib-shims",
        ":ppxlib.ast",
        ":ppxlib.stdppx",
        ":sexplib0",
        ":ppxlib.print_diff",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.ppxlib-plugin",
    src = "opam/lib/ppxlib/ppxlib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.ast",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.ast",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/ast",
    native_lib = "opam/lib/ppxlib/ast/ppxlib_ast.cmxa",
    bytecode_lib = "opam/lib/ppxlib/ast/ppxlib_ast.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib.astlib",
        ":stdlib-shims",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.ast.ppxlib_ast-plugin",
    src = "opam/lib/ppxlib/ast/ppxlib_ast.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.astlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.astlib",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/astlib",
    native_lib = "opam/lib/ppxlib/astlib/astlib.cmxa",
    bytecode_lib = "opam/lib/ppxlib/astlib/astlib.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ocaml-compiler-libs.common",
        ":compiler-libs.common",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.astlib.astlib-plugin",
    src = "opam/lib/ppxlib/astlib/astlib.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.metaquot",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.metaquot",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/metaquot",
    native_lib = "opam/lib/ppxlib/metaquot/ppxlib_metaquot.cmxa",
    bytecode_lib = "opam/lib/ppxlib/metaquot/ppxlib_metaquot.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib.traverse_builtins",
        ":ppxlib.astlib",
        ":ppxlib.ast",
        ":ppxlib",
        ":ppxlib.metaquot_lifters",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.metaquot-runtime-deps",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.metaquot-runtime-deps",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/metaquot",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib.ast",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.metaquot.ppxlib_metaquot-plugin",
    src = "opam/lib/ppxlib/metaquot/ppxlib_metaquot.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.metaquot_lifters",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.metaquot_lifters",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/metaquot_lifters",
    native_lib = "opam/lib/ppxlib/metaquot_lifters/ppxlib_metaquot_lifters.cmxa",
    bytecode_lib = "opam/lib/ppxlib/metaquot_lifters/ppxlib_metaquot_lifters.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib.traverse_builtins",
        ":stdlib-shims",
        ":ppxlib.ast",
        ":ppxlib",
        ":ppxlib.stdppx",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.metaquot_lifters.ppxlib_metaquot_lifters-plugin",
    src = "opam/lib/ppxlib/metaquot_lifters/ppxlib_metaquot_lifters.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.print_diff",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.print_diff",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/print_diff",
    native_lib = "opam/lib/ppxlib/print_diff/ppxlib_print_diff.cmxa",
    bytecode_lib = "opam/lib/ppxlib/print_diff/ppxlib_print_diff.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.print_diff.ppxlib_print_diff-plugin",
    src = "opam/lib/ppxlib/print_diff/ppxlib_print_diff.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.runner",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.runner",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/runner",
    native_lib = "opam/lib/ppxlib/runner/ppxlib_runner.cmxa",
    bytecode_lib = "opam/lib/ppxlib/runner/ppxlib_runner.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":ppxlib.ast",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.runner.ppxlib_runner-plugin",
    src = "opam/lib/ppxlib/runner/ppxlib_runner.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.runner_as_ppx",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.runner_as_ppx",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/runner_as_ppx",
    native_lib = "opam/lib/ppxlib/runner_as_ppx/ppxlib_runner_as_ppx.cmxa",
    bytecode_lib = "opam/lib/ppxlib/runner_as_ppx/ppxlib_runner_as_ppx.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":ppxlib.ast",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.runner_as_ppx.ppxlib_runner_as_ppx-plugin",
    src = "opam/lib/ppxlib/runner_as_ppx/ppxlib_runner_as_ppx.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.stdppx",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.stdppx",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/stdppx",
    native_lib = "opam/lib/ppxlib/stdppx/stdppx.cmxa",
    bytecode_lib = "opam/lib/ppxlib/stdppx/stdppx.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":sexplib0",
        ":stdlib-shims",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.stdppx.stdppx-plugin",
    src = "opam/lib/ppxlib/stdppx/stdppx.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.traverse",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.traverse",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/traverse",
    native_lib = "opam/lib/ppxlib/traverse/ppxlib_traverse.cmxa",
    bytecode_lib = "opam/lib/ppxlib/traverse/ppxlib_traverse.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib.traverse_builtins",
        ":stdlib-shims",
        ":ppxlib.ast",
        ":ppxlib",
        ":ppxlib.stdppx",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.traverse-runtime-deps",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.traverse-runtime-deps",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/traverse",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.traverse.ppxlib_traverse-plugin",
    src = "opam/lib/ppxlib/traverse/ppxlib_traverse.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "ppxlib.traverse_builtins",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "ppxlib.traverse_builtins",
    lib_dir = "",
    include_dir = "opam/lib/ppxlib/traverse_builtins",
    native_lib = "opam/lib/ppxlib/traverse_builtins/ppxlib_traverse_builtins.cmxa",
    bytecode_lib = "opam/lib/ppxlib/traverse_builtins/ppxlib_traverse_builtins.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "ppxlib.traverse_builtins.ppxlib_traverse_builtins-plugin",
    src = "opam/lib/ppxlib/traverse_builtins/ppxlib_traverse_builtins.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "qcheck-alcotest",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "qcheck-alcotest",
    lib_dir = "",
    include_dir = "opam/lib/qcheck-alcotest",
    native_lib = "opam/lib/qcheck-alcotest/qcheck_alcotest.cmxa",
    bytecode_lib = "opam/lib/qcheck-alcotest/qcheck_alcotest.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":bytes",
        ":alcotest",
        ":qcheck-core",
        ":qcheck-core.runner",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "qcheck-alcotest.qcheck_alcotest-plugin",
    src = "opam/lib/qcheck-alcotest/qcheck_alcotest.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "qcheck-core",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "qcheck-core",
    lib_dir = "",
    include_dir = "opam/lib/qcheck-core",
    native_lib = "opam/lib/qcheck-core/qcheck_core.cmxa",
    bytecode_lib = "opam/lib/qcheck-core/qcheck_core.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":bytes",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "qcheck-core.qcheck_core-plugin",
    src = "opam/lib/qcheck-core/qcheck_core.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "qcheck-core.runner",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "qcheck-core.runner",
    lib_dir = "",
    include_dir = "opam/lib/qcheck-core/runner",
    native_lib = "opam/lib/qcheck-core/runner/qcheck_runner.cmxa",
    bytecode_lib = "opam/lib/qcheck-core/runner/qcheck_runner.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":qcheck-core",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "qcheck-core.runner.qcheck_runner-plugin",
    src = "opam/lib/qcheck-core/runner/qcheck_runner.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re",
    lib_dir = "",
    include_dir = "opam/lib/re",
    native_lib = "opam/lib/re/re.cmxa",
    bytecode_lib = "opam/lib/re/re.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":seq",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.re-plugin",
    src = "opam/lib/re/re.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.emacs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.emacs",
    lib_dir = "",
    include_dir = "opam/lib/re/emacs",
    native_lib = "opam/lib/re/emacs/re_emacs.cmxa",
    bytecode_lib = "opam/lib/re/emacs/re_emacs.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.emacs.re_emacs-plugin",
    src = "opam/lib/re/emacs/re_emacs.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.glob",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.glob",
    lib_dir = "",
    include_dir = "opam/lib/re/glob",
    native_lib = "opam/lib/re/glob/re_glob.cmxa",
    bytecode_lib = "opam/lib/re/glob/re_glob.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.glob.re_glob-plugin",
    src = "opam/lib/re/glob/re_glob.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.pcre",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.pcre",
    lib_dir = "",
    include_dir = "opam/lib/re/pcre",
    native_lib = "opam/lib/re/pcre/re_pcre.cmxa",
    bytecode_lib = "opam/lib/re/pcre/re_pcre.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.pcre.re_pcre-plugin",
    src = "opam/lib/re/pcre/re_pcre.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.perl",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.perl",
    lib_dir = "",
    include_dir = "opam/lib/re/perl",
    native_lib = "opam/lib/re/perl/re_perl.cmxa",
    bytecode_lib = "opam/lib/re/perl/re_perl.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.perl.re_perl-plugin",
    src = "opam/lib/re/perl/re_perl.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.posix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.posix",
    lib_dir = "",
    include_dir = "opam/lib/re/posix",
    native_lib = "opam/lib/re/posix/re_posix.cmxa",
    bytecode_lib = "opam/lib/re/posix/re_posix.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.posix.re_posix-plugin",
    src = "opam/lib/re/posix/re_posix.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "re.str",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "re.str",
    lib_dir = "",
    include_dir = "opam/lib/re/str",
    native_lib = "opam/lib/re/str/re_str.cmxa",
    bytecode_lib = "opam/lib/re/str/re_str.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":re",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "re.str.re_str-plugin",
    src = "opam/lib/re/str/re_str.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "result",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "result",
    lib_dir = "",
    include_dir = "opam/lib/result",
    native_lib = "opam/lib/result/result.cmxa",
    bytecode_lib = "opam/lib/result/result.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "result.result-plugin",
    src = "opam/lib/result/result.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "runtime_events",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "runtime_events",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/runtime_events",
    native_lib = "opam/lib/ocaml/runtime_events/runtime_events.cmxa",
    bytecode_lib = "opam/lib/ocaml/runtime_events/runtime_events.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "runtime_events.runtime_events-plugin",
    src = "opam/lib/ocaml/runtime_events/runtime_events.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "sedlex",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "sedlex",
    lib_dir = "",
    include_dir = "opam/lib/sedlex",
    native_lib = "opam/lib/sedlex/sedlex.cmxa",
    bytecode_lib = "opam/lib/sedlex/sedlex.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":gen",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "sedlex.sedlex-plugin",
    src = "opam/lib/sedlex/sedlex.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "sedlex.ppx",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "sedlex.ppx",
    lib_dir = "",
    include_dir = "opam/lib/sedlex/ppx",
    native_lib = "opam/lib/sedlex/ppx/sedlex_ppx.cmxa",
    bytecode_lib = "opam/lib/sedlex/ppx/sedlex_ppx.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":ppxlib",
        ":ppxlib.ast",
        ":sedlex.utils",
        ":sedlex",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "sedlex.ppx-runtime-deps",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "sedlex.ppx-runtime-deps",
    lib_dir = "",
    include_dir = "opam/lib/sedlex/ppx",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":sedlex",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "sedlex.ppx.sedlex_ppx-plugin",
    src = "opam/lib/sedlex/ppx/sedlex_ppx.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "sedlex.utils",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "sedlex.utils",
    lib_dir = "",
    include_dir = "opam/lib/sedlex/utils",
    native_lib = "opam/lib/sedlex/utils/sedlex_utils.cmxa",
    bytecode_lib = "opam/lib/sedlex/utils/sedlex_utils.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "sedlex.utils.sedlex_utils-plugin",
    src = "opam/lib/sedlex/utils/sedlex_utils.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "seq",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "seq",
    lib_dir = "",
    include_dir = "opam/lib/seq",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "sexplib0",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "sexplib0",
    lib_dir = "",
    include_dir = "opam/lib/sexplib0",
    native_lib = "opam/lib/sexplib0/sexplib0.cmxa",
    bytecode_lib = "opam/lib/sexplib0/sexplib0.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "sexplib0.sexplib0-plugin",
    src = "opam/lib/sexplib0/sexplib0.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "spawn",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "spawn",
    lib_dir = "",
    include_dir = "opam/lib/spawn",
    native_lib = "opam/lib/spawn/spawn.cmxa",
    bytecode_lib = "opam/lib/spawn/spawn.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/spawn/libspawn_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/spawn/libspawn_stubs.a",
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":threads",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "spawn.spawn-plugin",
    src = "opam/lib/spawn/spawn.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdlib",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdlib",
    lib_dir = "",
    include_dir = "opam/lib/ocaml",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdlib-shims",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdlib-shims",
    lib_dir = "",
    include_dir = "opam/lib/stdlib-shims",
    native_lib = "opam/lib/stdlib-shims/stdlib_shims.cmxa",
    bytecode_lib = "opam/lib/stdlib-shims/stdlib_shims.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "stdlib-shims.stdlib_shims-plugin",
    src = "opam/lib/stdlib-shims/stdlib_shims.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdune",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdune",
    lib_dir = "",
    include_dir = "opam/lib/stdune",
    native_lib = "opam/lib/stdune/stdune.cmxa",
    bytecode_lib = "opam/lib/stdune/stdune.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/stdune/libstdune_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/stdune/libstdune_stubs.a",
    ],
    bytecode_only = True,
    deps = [
        ":unix",
        ":ordering",
        ":csexp",
        ":pp",
        ":stdune.filesystem_stubs",
        ":dyn",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "stdune.stdune-plugin",
    src = "opam/lib/stdune/stdune.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "stdune.filesystem_stubs",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "stdune.filesystem_stubs",
    lib_dir = "",
    include_dir = "opam/lib/stdune/filesystem_stubs",
    native_lib = "opam/lib/stdune/filesystem_stubs/dune_filesystem_stubs.cmxa",
    bytecode_lib = "opam/lib/stdune/filesystem_stubs/dune_filesystem_stubs.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/stdune/filesystem_stubs/libdune_filesystem_stubs_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/stdune/filesystem_stubs/libdune_filesystem_stubs_stubs.a",
    ],
    bytecode_only = True,
    deps = [
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "stdune.filesystem_stubs.dune_filesystem_stubs-plugin",
    src = "opam/lib/stdune/filesystem_stubs/dune_filesystem_stubs.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "str",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "str",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/str",
    native_lib = "opam/lib/ocaml/str/str.cmxa",
    bytecode_lib = "opam/lib/ocaml/str/str.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "str.str-plugin",
    src = "opam/lib/ocaml/str/str.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "threads",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "threads",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/threads",
    native_lib = "opam/lib/ocaml/threads/threads.cmxa",
    bytecode_lib = "opam/lib/ocaml/threads/threads.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":unix",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "threads.posix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "threads.posix",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/threads",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":threads",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "topkg",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "topkg",
    lib_dir = "",
    include_dir = "opam/lib/topkg",
    native_lib = "opam/lib/topkg/topkg.cmxa",
    bytecode_lib = "opam/lib/topkg/topkg.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "topkg.topkg-plugin",
    src = "opam/lib/topkg/topkg.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "unix",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "unix",
    lib_dir = "",
    include_dir = "opam/lib/ocaml/unix",
    native_lib = "opam/lib/ocaml/unix/unix.cmxa",
    bytecode_lib = "opam/lib/ocaml/unix/unix.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "unix.unix-plugin",
    src = "opam/lib/ocaml/unix/unix.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "uutf",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "uutf",
    lib_dir = "",
    include_dir = "opam/lib/uutf",
    native_lib = "opam/lib/uutf/uutf.cmxa",
    bytecode_lib = "opam/lib/uutf/uutf.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "uutf.uutf-plugin",
    src = "opam/lib/uutf/uutf.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "xdg",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "xdg",
    lib_dir = "",
    include_dir = "opam/lib/xdg",
    native_lib = "opam/lib/xdg/xdg.cmxa",
    bytecode_lib = "opam/lib/xdg/xdg.cma",
    c_libs = None,
    native_c_libs = [
        "opam/lib/xdg/libxdg_stubs.a",
    ],
    bytecode_c_libs = [
        "opam/lib/xdg/libxdg_stubs.a",
    ],
    bytecode_only = True,
    deps = [
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "xdg.xdg-plugin",
    src = "opam/lib/xdg/xdg.cmxs",
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
prebuilt_ocaml_library(
    name = "yojson",
    visibility = [
        "PUBLIC",
    ],
    lib_name = "yojson",
    lib_dir = "",
    include_dir = "opam/lib/yojson",
    native_lib = "opam/lib/yojson/yojson.cmxa",
    bytecode_lib = "opam/lib/yojson/yojson.cma",
    c_libs = None,
    native_c_libs = [
    ],
    bytecode_c_libs = [
    ],
    bytecode_only = True,
    deps = [
        ":seq",
    ],
) if not host_info().os.is_windows else None

# buildifier: disable=no-effect
export_file(
    name = "yojson.yojson-plugin",
    src = "opam/lib/yojson/yojson.cmxs",
) if not host_info().os.is_windows else None

